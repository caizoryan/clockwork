{"blocks":[{"type":"group","output":"let sketch = (p) => {\n  let viddy \n\n  let locations = {\n    r: {x: 0, y:0},\n    g: {x: 0, y:0},\n    b: {x: 0, y:0}\n  }\n  \n  let last_r\n  let last_g\n  let last_b\n  let options = [\"r\", \"g\", \"b\"]\n  let cur = 0\n\n  let current = () => locations[options[cur]]\n  \n  p.setup = () => {\n    p.createCanvas(450, 450)\n    // p.frameRate(2)\n    // viddy = p.createVideo(video_link)\n    viddy = p.createCapture(p.VIDEO);\n \n    viddy.hide()\n    viddy.play()\n  }\n\n  p.mouseClicked = () => {\n    cur = (cur + 1) % options.length \n  }\n\n  p.draw = () => {\n    console.log(last_r)\n    \n    let c = last_r \n      ? p.color(last_r, last_g, last_b)\n      : \"pink\"\n    \n    p.background(c)\n    p.image(viddy, 0, 0, 150, 150)\n\n    let num = 0\n    let total_r = 0\n    let total_g = 0\n    let total_b = 0\n\n    let w_ = 5\n    let h_ = 5\n    let x_ = p.mouseX\n    let y_ = p.mouseY\n\n    current().x = x_\n    current().y = y_\n\n    let img = p.get(x_, y_, w_, h_)\n    let img_r = p.get(locations.r.x, locations.r.y, w_, h_)\n    let img_g = p.get(locations.g.x, locations.g.y, w_, h_)\n    let img_b = p.get(locations.b.x, locations.b.y, w_, h_)\n\n    p.image(img, 200, 200, w_, h_)\n\n    let [a_r, a_g, a_b] = get_color(img_r)\n    let [b_r, b_g, b_b] = get_color(img_g)\n    let [c_r, c_g, c_b] = get_color(img_b)\n\n    let avg_r = p.floor((a_r + a_g + a_b) / 3 )\n    let avg_g = p.floor((b_r + b_g + b_b) / 3 )\n    let avg_b = p.floor((c_r + c_g + c_b) / 3 )\n\n    avg_r = 255 - avg_r\n    avg_g = 255 - avg_g\n    avg_b = 255 - avg_b\n\n    last_r = avg_r\n    last_g = avg_g\n    last_b = avg_b\n\n    p.fill(last_r, last_g, last_b)\n    p.rect(x_, y_, w_, h_)\n    p.fill(\"white\")\n    \n     p.text(\"current: \"+ cur, 150, 150)\n     p.text(\"r\", locations.r.x, locations.r.y)\n     p.text(\"g\", locations.g.x, locations.g.y)\n     p.text(\"b\", locations.b.x, locations.b.y)\n    \n    p.image(img_r, 210, 210, w_, h_)\n    p.text(avg_r, 250, 210)\n    p.image(img_g, 210, 220, w_, h_)\n    p.text(avg_g, 250, 220)\n    p.image(img_b, 210, 230, w_, h_)\n    p.text(avg_b, 250, 230)\n    \n  }\n  \n  function get_color (img){\n    let num = 0\n    let total_r =0 \n    let total_g =0 \n    let total_b =0 \n    img.loadPixels()\n    const d = img.pixelDensity();\n    \n    for (let x = 0; x < img.width; x++) {\n      for (let y = 0; y < img.height; y++) {\n        const i = 4 * d*(y * d*img.width + x);\n        const [r, g, b] = [img.pixels[i], \n                           img.pixels[i + 1],\n                           img.pixels[i + 2]]; \n\n        num ++\n        total_r += r\n        total_g += g\n        total_b += b\n      }\n    }\n\n    let r = total_r / num\n    let g = total_g / num\n    let b = total_b / num\n    \n    return [r, g, b]\n    \n  }\n}\n\n\n\n\nnew p5(sketch)","blocks":[{"id":"in2sf","type":"default","code":"","active":false,"focus":false,"focused":false,"output":"let sketch = (p) => {\n  let viddy \n\n  let locations = {\n    r: {x: 0, y:0},\n    g: {x: 0, y:0},\n    b: {x: 0, y:0}\n  }\n  \n  let last_r\n  let last_g\n  let last_b\n  let options = [\"r\", \"g\", \"b\"]\n  let cur = 0\n\n  let current = () => locations[options[cur]]\n  \n  p.setup = () => {\n    p.createCanvas(450, 450)\n    // p.frameRate(2)\n    // viddy = p.createVideo(video_link)\n    viddy = p.createCapture(p.VIDEO);\n \n    viddy.hide()\n    viddy.play()\n  }\n\n  p.mouseClicked = () => {\n    cur = (cur + 1) % options.length \n  }\n\n  p.draw = () => {\n    console.log(last_r)\n    \n    let c = last_r \n      ? p.color(last_r, last_g, last_b)\n      : \"pink\"\n    \n    p.background(c)\n    p.image(viddy, 0, 0, 150, 150)\n\n    let num = 0\n    let total_r = 0\n    let total_g = 0\n    let total_b = 0\n\n    let w_ = 5\n    let h_ = 5\n    let x_ = p.mouseX\n    let y_ = p.mouseY\n\n    current().x = x_\n    current().y = y_\n\n    let img = p.get(x_, y_, w_, h_)\n    let img_r = p.get(locations.r.x, locations.r.y, w_, h_)\n    let img_g = p.get(locations.g.x, locations.g.y, w_, h_)\n    let img_b = p.get(locations.b.x, locations.b.y, w_, h_)\n\n    p.image(img, 200, 200, w_, h_)\n\n    let [a_r, a_g, a_b] = get_color(img_r)\n    let [b_r, b_g, b_b] = get_color(img_g)\n    let [c_r, c_g, c_b] = get_color(img_b)\n\n    let avg_r = p.floor((a_r + a_g + a_b) / 3 )\n    let avg_g = p.floor((b_r + b_g + b_b) / 3 )\n    let avg_b = p.floor((c_r + c_g + c_b) / 3 )\n\n    avg_r = 255 - avg_r\n    avg_g = 255 - avg_g\n    avg_b = 255 - avg_b\n\n    last_r = avg_r\n    last_g = avg_g\n    last_b = avg_b\n\n    p.fill(last_r, last_g, last_b)\n    p.rect(x_, y_, w_, h_)\n    p.fill(\"white\")\n    \n     p.text(\"current: \"+ cur, 150, 150)\n     p.text(\"r\", locations.r.x, locations.r.y)\n     p.text(\"g\", locations.g.x, locations.g.y)\n     p.text(\"b\", locations.b.x, locations.b.y)\n    \n    p.image(img_r, 210, 210, w_, h_)\n    p.text(avg_r, 250, 210)\n    p.image(img_g, 210, 220, w_, h_)\n    p.text(avg_g, 250, 220)\n    p.image(img_b, 210, 230, w_, h_)\n    p.text(avg_b, 250, 230)\n    \n  }\n  \n  function get_color (img){\n    let num = 0\n    let total_r =0 \n    let total_g =0 \n    let total_b =0 \n    img.loadPixels()\n    const d = img.pixelDensity();\n    \n    for (let x = 0; x < img.width; x++) {\n      for (let y = 0; y < img.height; y++) {\n        const i = 4 * d*(y * d*img.width + x);\n        const [r, g, b] = [img.pixels[i], \n                           img.pixels[i + 1],\n                           img.pixels[i + 2]]; \n\n        num ++\n        total_r += r\n        total_g += g\n        total_b += b\n      }\n    }\n\n    let r = total_r / num\n    let g = total_g / num\n    let b = total_b / num\n    \n    return [r, g, b]\n    \n  }\n}\n\n\n\n\nnew p5(sketch)","cursor":207}],"fold":false,"focus":false}]}