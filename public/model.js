export let model = { "blocks": [{ "type": "group", "output": "M.name = \"ws\"\nlet x = sig(5)\nlet y = sig(5)\nlet z = sig(5)\nlet ws = new WebSocket(\"ws://localhost:6969/data\")\n\nws.onopen = () => {\n    console.log(\"connected\")\n}\n\nws.onmessage = (e) => {\n    let data = JSON.parse(e.data)\n    console.log(data)\n    if(data.angle1) x.set(data.angle1)\n    if(data.angle2) y.set(data.angle2)\n    if(data.angle3) z.set(data.angle3)\n}\n\ndocument.body.style.background = \"#111\"\nlet stylesheet =  `\np {\n  margin: .2em 0;\n  font-family: monospace;\n}\n`\nlet style = mem(() => `\ntransition: all .1s;\nfont-size: 100px;\nmargin: 150px;\nbox-shadow: 0 0 22px 5px #ffffff44;\nbackground-color: yellow;\ntransform: \n  translateY(200px) \n  scale(${x()/50})\n  rotateY(${y()*2}deg) rotateZ(${z()*2}deg);\n`)\n\nlet metrics = mem(() => `\nposition: fixed;\nline-height: .8em;\ntop: 10px;\npadding: 5px;\nleft: 10px;\nbackground: white;\n`)\nlet p = (str) => h(\"p\", str)\nlet met = () => h(\"div\", {style: metrics},\n                  p(() => \"x: \"+ x()),\n                  p(() => \"y: \"+ y()),\n                  p(() => \"z: \"+ z())\n                 )\n\nlet App = () => \n  h(\"div\",\n    h(\"style\", stylesheet),\n    h(\"div\", {style: style}, \"hello\" ),\n    met\n   )\n\n\nrender(App, document.body)", "blocks": [{ "id": "lrarka", "type": "default", "code": "", "active": false, "focus": false, "focused": false, "output": "M.name = \"ws\"", "cursor": 0 }, { "id": "zigf1k", "type": "group", "code": "", "active": false, "focus": false, "output": "let x = sig(5)\nlet y = sig(5)\nlet z = sig(5)\nlet ws = new WebSocket(\"ws://localhost:6969/data\")\n\nws.onopen = () => {\n    console.log(\"connected\")\n}\n\nws.onmessage = (e) => {\n    let data = JSON.parse(e.data)\n    console.log(data)\n    if(data.angle1) x.set(data.angle1)\n    if(data.angle2) y.set(data.angle2)\n    if(data.angle3) z.set(data.angle3)\n}\n", "blocks": [{ "id": "to201m", "type": "default", "code": "", "active": false, "focus": false, "focused": false, "output": "let x = sig(5)\nlet y = sig(5)\nlet z = sig(5)", "cursor": 0 }, { "id": "40wp8mf", "type": "default", "code": "", "active": false, "focus": false, "focused": false, "output": "let ws = new WebSocket(\"ws://localhost:6969/data\")\n\nws.onopen = () => {\n    console.log(\"connected\")\n}\n\nws.onmessage = (e) => {\n    let data = JSON.parse(e.data)\n    console.log(data)\n    if(data.angle1) x.set(data.angle1)\n    if(data.angle2) y.set(data.angle2)\n    if(data.angle3) z.set(data.angle3)\n}\n", "cursor": 0 }], "fold": true }, { "id": "ktw19g", "type": "group", "code": "", "active": false, "focus": false, "output": "document.body.style.background = \"#111\"\nlet stylesheet =  `\np {\n  margin: .2em 0;\n  font-family: monospace;\n}\n`\nlet style = mem(() => `\ntransition: all .1s;\nfont-size: 100px;\nmargin: 150px;\nbox-shadow: 0 0 22px 5px #ffffff44;\nbackground-color: yellow;\ntransform: \n  translateY(200px) \n  scale(${x()/50})\n  rotateY(${y()*2}deg) rotateZ(${z()*2}deg);\n`)\n\nlet metrics = mem(() => `\nposition: fixed;\nline-height: .8em;\ntop: 10px;\npadding: 5px;\nleft: 10px;\nbackground: white;\n`)", "blocks": [{ "id": "xka2i1t", "type": "default", "code": "", "active": false, "focus": false, "focused": false, "output": "document.body.style.background = \"#111\"\nlet stylesheet =  `\np {\n  margin: .2em 0;\n  font-family: monospace;\n}\n`\nlet style = mem(() => `\ntransition: all .1s;\nfont-size: 100px;\nmargin: 150px;\nbox-shadow: 0 0 22px 5px #ffffff44;\nbackground-color: yellow;\ntransform: \n  translateY(200px) \n  scale(${x()/50})\n  rotateY(${y()*2}deg) rotateZ(${z()*2}deg);\n`)\n\nlet metrics = mem(() => `\nposition: fixed;\nline-height: .8em;\ntop: 10px;\npadding: 5px;\nleft: 10px;\nbackground: white;\n`)", "cursor": 0 }], "fold": true }, { "id": "9e3ec", "type": "group", "code": "", "active": false, "focus": true, "output": "let p = (str) => h(\"p\", str)\nlet met = () => h(\"div\", {style: metrics},\n                  p(() => \"x: \"+ x()),\n                  p(() => \"y: \"+ y()),\n                  p(() => \"z: \"+ z())\n                 )\n\nlet App = () => \n  h(\"div\",\n    h(\"style\", stylesheet),\n    h(\"div\", {style: style}, \"hello\" ),\n    met\n   )\n\n\nrender(App, document.body)", "blocks": [{ "id": "1yo6o", "type": "default", "code": "", "active": false, "focus": true, "focused": false, "output": "let p = (str) => h(\"p\", str)\nlet met = () => h(\"div\", {style: metrics},\n                  p(() => \"x: \"+ x()),\n                  p(() => \"y: \"+ y()),\n                  p(() => \"z: \"+ z())\n                 )\n\nlet App = () => \n  h(\"div\",\n    h(\"style\", stylesheet),\n    h(\"div\", {style: style}, \"hello\" ),\n    met\n   )\n\n\nrender(App, document.body)", "cursor": 0 }], "fold": false }], "fold": false, "focus": false }] }
